<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>FOSS Barcode Tool</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <style type="text/css">@import "../css/docstyle.css";</style>
</head>

<body>

<!-- if the line count above changes, you need to adjust 
     documentation in views.py, as it cuts the first 11 lines -->
<div id="lside">
  <ul>
    <li><a href="#overview">Overview</a></li>
    <li><a href="#setup">Setup</a></li>
    <ul>
      <li><a href="#requirements">Requirements</a></li>
      <li><a href="#install">Installation</a></li>
      <ul>
        <li><a href="#from_package">From Packages</a></li>
        <li><a href="#from_git">From Git</a></li>
      </ul>
      <li><a href="#layout">System Layout</a></li>
      <li><a href="#server">Server</a></li>
    </ul>
    <li><a href="#gui">Accessing the GUI</a></li>
    <li><a href="#gui-use">Using the GUI</a></li>
    <li><a href="#admin">Admin Interface</a></li>
    <li><a href="#database">Database Schema</a></li>
    <li><a href="#backend">How it Works</a></li>
    <li><a href="#limitations">Limitations</a></li>
  </ul>
  <ul>
    <li><a href="#authors">Authors</a></li>
    <li><a href="#changelog">Changelog</a></li>
    <li><a href="#contributing">Contributing</a></li>
    <li><a href="#license">License</a></li>
  </ul>
</div>

<div id="main">
<div id="overview">
<b>Overview</b>
<p>
The FOSS Barcode Tool is a tool to that generates a checksum and an identifying barcode for
a product composed of FOSS Components. The user compiles a set of data describing the product, SPDX files,
and FOSS components/patches and the tool generates a unique signature of this dataset.</p>

<p>You can view the development source from 
<a href="http://git.linuxfoundation.org/?p=foss-barcode.git;a=summary">git</a>, 
or check it out using standard git commands:
<pre>
git clone http://git.linuxfoundation.org/foss-barcode.git
</pre>
</p>
<p>Bugs can be filed under the 
<a href="http://bugs.linuxfoundation.org/enter_bug.cgi?product=Compliance">Compliance</a>
product.</p>
<p>There is also a 
<a href="https://lists.linux-foundation.org/mailman/listinfo/foss-barcode-dev">mail list</a>
for discussion of the tool.</p>
</div>

<div id="setup">
<b>Setup:</b><p></p>
</div>

<div id="requirements">
<b>System Requirements:</b>

<p>The GUI requires python. It also runs the OS commands: 
<i>find, cat, barcode, md5sum, pstopnm, and pnmtopng</i>, so these should be present on your system.
The GUI requires <a href="http://www.djangoproject.com">Django</a>, along with sqlite 
support for the results database. A web browser is also needed to interact with the GUI.
If your distribution does not provide Django, you can follow these 
<a href="http://docs.djangoproject.com/en/dev/intro/install/">installation instructions</a>.</p>

<p>If your distribution does not provide <i>barcode</i>, it can be built from source:
<pre>
wget ftp://mirrors.kernel.org/gnu/barcode/barcode-0.98.tar.gz
tar -xzf barcode-0.98.tar.gz
cd barcode-0.98
./configure
make
make install (using sudo or as root)
</pre>
The only package I found I needed outside of a regular development toolchain (gcc, make, etc.), was texinfo,
for the command <i>makeinfo</i>.  The rest of the commands used by the back end should be reasonably common 
on most distributions.</p>

</div>

<div id="install">
<b>Installation:</b><p></p>
</div>

<div id="from_package">
<b>From Packages:</b>

<p>The program is packaged as an rpm package, with dependencies on python-django. If your 
system does not provide django, or it's named differently, you may need to install using
--nodeps:

<pre>
rpm -Uvh foss-barcode-0.0.1-1.noarch.rpm --nodeps
</pre>

<p><b>Note:</b> If you had to use --nodeps, then you <em>must</em> make sure django is installed
and functional on your system. Both the command line program and the gui depend on django.</p>
 
The installation creates a "compliance" user/group and should create a desktop menu entry
to launch the server and open the GUI in your web browser.</p>

<p>In the future we may bundle django with the package to make things simpler, as well as 
provide .deb packaging.</p>

</div>

<div id="from_git">
<b>From Git:</b>

<p>You can also checkout the project from git and run it in place:

<pre>
git clone http://git.linuxfoundation.org/foss-barcode.git
cd foss-barcode
</pre>

Alternately, you can get the latest tarball from the 
<a href="http://git.linuxfoundation.org/?p=foss-barcode.git;a=summary">git</a> web page by
clicking on the <i>snapshot</i> link in the upper right-hand part of the page.</p>

<p>Once you have the tarball, unpack it (example, the numbers of your download may differ):</p>
<pre>
tar -xf foss-barcode-3af829ae0cc5aba33192c000ef0365ef6bced843.tar.gz
cd foss-barcode
</pre>

Create the application database and the documentation (you will need w3m to create 
README.txt).

<pre>
make
</pre>

If you don't have root permissions on the machine to install Django, you can install it in-place 
with the foss-barcode install:

<pre>
tar -xf Django-x.x.x.tar-gz
cp -ar Django-x.x.x/django foss-barcode/compliance
cd foss-barcode/bin
ln -s ../compliance/django .
</pre>

Run the server and the gui should show up in a browser window:
<pre>
./bin/foss-barcode.py start
</pre>

To kill the django server, you can run:
<pre>
./bin/foss-barcode.py stop
</pre></p>

</div>

<div id="layout">
<b>System Layout:</b>

<p>
The application installs under the <i>/opt/linuxfoundation</i> namespace:

<ul>
<li><b>bin</b> - wrapper script to launch gui</li>
<li><b>compliance</b> - gui application tree and results database</li>
<li><b>doc</b> - License file</li>
<li><b>share</b> - Desktop menu files and icons</li>
</ul>

Under the compliance tree, is a typical django project layout:

<ul>
<li><b>compliance</b> - sqlite results database
<li><b>__init__.py, manage.py, settings.py, urls.py</b> - generated by django at project 
    creation, <i>settings.py</i> does have some configurable settings. None of the others should 
    be altered.</li>
<li><b>linkage</b> - foss-barcode GUI code</li>
<li><b>media</b> - static html elements such as images, css, javascript files. Documentation 
    is also in this directory.</li>
<li><b>templates/linkage</b> - the foss-barcode html tree</li>
</ul>
</div>

<div id="server">
<b>Running the GUI server:</b>

<p>To run the gui/server (as user compliance for installed package), there is a 
script that su's to the compliance user, starts the server and attempts to open a browser
page to the GUI:

<pre>
/opt/linuxfoundation/bin/foss-barcode.py start
</pre>

To stop the server run:

<pre>
/opt/linuxfoundation/bin/foss-barcode.py stop
</pre>
</p>

<p>If for some reason this does not work, you can manually perform the steps to start the
 server:

<pre>
su - compliance
cd /opt/linuxfoundation/compliance
python manage.py runserver
</pre>

You can terminate the server from this console by hitting ctrl-C
</p>
</div>

<div id="gui">
<b>Accessing the GUI:</b>
<p>
If a browser does not open by launching the menu item, you can access the GUI 
(once the server is started): at 
<a href="http://127.0.0.1:8000/barcode" target="_blank">http://127.0.0.1:8000/linkage</a>.
</p>
</div>

<div id="gui-use">
<b>Using the GUI:</b>

<p>The GUI interface is pretty straightforward, with tabs to access various aspects of
program:

<ul>
<li><a href="#Enter Data"><b>Enter Data</b></a> - Data entry form</li>
<li><a href="#Review Records"><b>Review Records</b></a> - Tabular list of existing records</li>
<li><a href="#Search Records"><b>Search Records</b></a> - Search for records by checksum tab</li>
<li><b>Documentation</b> - This documentation</li>
</ul>

The final page, which isn't visible in the tabs, is the record detail page, 
brought up by either generating a barcode, or clicking on the link in the results page.
</p>

<div id="Enter Data">
<b>Enter Data:</b>

<p>This tab is where you enter the information that defines the "product". This includes Company Name, 
FOSS Website (optional), Product Name, Product Version, and Product Release. The date and username are
also recorded, simply for record keeping. They do not contribute to the checksum.</p>

<p>There are additional option components that can be entered or loaded to further define the product. 
These include SPDX files as well as a tabular list of FOSS Components and possible patches. If files
are loaded using the file selection navigator, they are stored in the system under user_data for review later
in the detailed reporting. Multiple files can be loaded for either SPDX files or FOSS component patches.
For FOSS components, the name of the component and the version are required as a minumum for an entry.</p>

<p>Once you enter the data, click on the <b>Create Checksum/Barcode</b> button. After the data
is compiled you will be presented with the detailed record results in tabular form, with a graphical
image of the barcode. The <i>Download Postscript</i> link will download an .eps file of the bardcode
image for product packaging. Websites and uploaded files should be clickable links for further information.</p>

<p>There is a <i>Print Results</i> button on the detail page that should open the browser print
dialog to print to a physical printer or to a file. Some parts of the GUI are hidden in the
printed output so that only the test results show up in the printed report.</p>

</div>

<div id="Review Records">
<b>Review Records:</b>

<p>The data records should also be accessible from the <b>Review Records</b> page. This is a tabular
list of all the data entries, sorted by id/date. The far-right column has a summary of the information
entered from the <b>Enter Data</b> tab. Clicking on the link for the id will 
open the detail tab. If you want to delete records, you can select the checkboxes and 
delete them from here, using the <i>Delete Selected Records</i> button.</p>
</div>

<div id="Search Records">
<b>Search Records:</b>

<p>The <b>Search Records</b> tab lets you enter a checksum and lookup the data detail for that value.</p>

</div>

</div> <!-- end of Using the GUI -->
 
<div id="admin">
<b>Admin Interface:</b>

<p>In the current configuration, the django admin interface is enabled. While you can use 
this interface to directly access the database records, one should take care not to alter 
existing records, except in the case of wishing to add license information to records.</p>

<p><b>admin interface:</b> <a href="http://127.0.0.1:8000/admin" target="_blank">http://127.0.0.1:8000/admin</a>
(username compliance, password compliance)
</p>
</div>

<div id="database">
<b>Database Schema:</b>

<p>The database for the application is in the file <i>barcode.sqlite</i> in the compliance 
directory. It is an sqlite3 database file. Tables used by the application are as follows
(arranged more or less as they are integrated into the application tabs):</p>

<ul>
<li><b>barcode_record</b> - table containing the information entered from the <b>Enter Data</b> tab. Each
record has an <i>id</i> used to track the record and the relationships to the spdx, components and patch 
tables.</li>
  <ul>
    <li>id - record id, used for linking to the spdx and components tables (primary key)</li>
    <li>company - Company Name</li>
    <li>website - Company FOSS Website</li>
    <li>record_date - Date/time record was created</li>
    <li>user - Username who created the record</li>
    <li>product - Product name</li>
    <li>version - Product Verson</li>
    <li>release - Product Release</li>
    <li>checksum - Generated Checksum</li>
  </ul>
<li><b>spdx_files</b> - list of upload SPDX files. Linked to the <i>record</i> table via <i>brecord_id</i>.</li>          
  <ul>
    <li>id - primary key</li>
    <li>brecord_id - link to the top-level record entry</li>
    <li>path - original path to the uploaded file</li>
  </ul>
<li><b>foss_components</b> - entered list of FOSS components, versions, etc. Linked to the <i>record</i> table 
via <i>brecord_id</i>.</li>           
  <ul>
    <li>id - primary key</li>
    <li>brecord_id - link to the top-level record entry</li>
    <li>package - FOSS component name (e.g. glibc)</li>
    <li>version - FOSS componenent version</li>
    <li>license - FOSS componenent license (e.g. GPLv2)</li>
    <li>url - upstream URL where FOSS component can be obtained</li>

  </ul>
<li><b>patch_files</b> - List of uploaded patch files. Linked to the <i>foss_components</i> table via
<i>frecord_id</i>.</li>
  <ul>
    <li>id - primary key</li>
    <li>frecord_id - link to the foss_components record entry</li>
    <li>path - original path to the uploaded file</li>
  </ul>
</ul>
</div>

<div id="backend">
<b>How it Works:</b>

<p>what the program does is write all the user inputs to a temporary <tt>barcode_data.xml</tt> file, and along with
the other (optional) uploaded files in a subdirectory named with the record id, feed these through md5sum to get 
a checksum:

<pre>
find . -type f -exec cat {} | md5sum -
</pre>

This checksum is then used to generate the barcode, using the command line <i>barcode</i> application:

<pre>
barcode -b &lt;checksum&gt; -e 128 -m '0,0' -E &gt; &lt;checksum&gt;.ps
</pre>

and converted to a bitmap for display on the detail page:

<pre>
pstopnm -xsize 500 -portrait -stdout &lt;checksum&gt;.ps | pnmtopng &gt; &lt;checksum&gt;.png
</pre>

The xml file is discarded after the checksum generation, as the data remains in the database.
</p>

</div>

<div id="limitations">
<b>Limitations:</b>

<p>Currently the application does not attempt to parse imported SPDX files.</p>

</div>

<!-- content beyond here is generated by the Makefile -->
