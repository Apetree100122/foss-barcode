<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
  <title>FOSS Barcode Tool</title>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
  <style type="text/css">@import "../css/docstyle.css";</style>
</head>

<body>

<!-- if the line count above changes, you need to adjust 
     documentation in views.py, as it cuts the first 11 lines -->
<div id="lside">
  <ul>
    <li><a href="#overview">Overview</a></li>
    <li><a href="#setup">Setup</a></li>
    <ul>
      <li><a href="#requirements">Requirements</a></li>
      <li><a href="#install">Installation</a></li>
      <ul>
        <li><a href="#from_package">From Packages</a></li>
        <li><a href="#from_git">From Git</a></li>
      </ul>
      <li><a href="#layout">System Layout</a></li>
      <li><a href="#server">Server</a></li>
    </ul>
    <li><a href="#gui">Accessing the GUI</a></li>
    <li><a href="#gui-use">Using the GUI</a></li>
    <li><a href="#admin">Admin Interface</a></li>
    <li><a href="#database">Database Schema</a></li>
    <li><a href="#dbserver">Using a Database Server</a></li>
    <li><a href="#pfacing">Public-Facing Configuration</a></li>
    <li><a href="#backend">How it Works</a></li>
    <li><a href="#limitations">Limitations</a></li>
  </ul>
  <ul>
    <li><a href="#authors">Authors</a></li>
    <li><a href="#changelog">Changelog</a></li>
    <li><a href="#contributing">Contributing</a></li>
    <li><a href="#license">License</a></li>
  </ul>
</div>

<div id="main">
<div id="overview">
<b>Overview</b>
<p>
The FOSS Barcode Tool is a tool to that generates a checksum and an identifying barcode for
a product composed of FOSS Components. The user compiles a set of data describing the product, SPDX<sup>TM</sup> files,
and FOSS components/patches and the tool generates a unique signature of this dataset.</p>

<p>You can view the development source from 
<a href="http://git.linuxfoundation.org/?p=foss-barcode.git;a=summary">git</a>, 
or check it out using standard git commands:
<pre>
git clone http://git.linuxfoundation.org/foss-barcode.git
</pre>
</p>
<p>Bugs can be filed under the 
<a href="http://bugs.linuxfoundation.org/enter_bug.cgi?product=Compliance">Compliance</a>
product.</p>
<p>There is also a 
<a href="https://lists.linux-foundation.org/mailman/listinfo/foss-barcode-dev">mail list</a>
for discussion of the tool.</p>
</div>

<div id="setup">
<b>Setup:</b><p></p>
</div>

<div id="requirements">
<b>System Requirements:</b>

<p>The GUI requires python. It also runs the OS commands: 
<i>barcode, qrencode, pstopnm, pnmtopng, and sam2p</i>, so these should be present on your system.
The GUI requires <a href="http://www.djangoproject.com">Django</a>, along with sqlite 
support for the results database. A web browser is also needed to interact with the GUI.
If your distribution does not provide Django, you can follow these 
<a href="http://docs.djangoproject.com/en/dev/intro/install/">installation instructions</a>.</p>

<p>The record history/changelog is stored as a git repository for each record under media/user_data/record_id. 
Dulwich is used to interface with git from python. If your distribution does not provide Dulwich, it can be built from source:

<pre>
wget http://www.samba.org/~jelmer/dulwich/dulwich-0.7.1.tar.gz
tar -xzf dulwich-0.7.1.tar.gz
cd dulwich-0.7.1
python setup.py build
python setup.py install (using sudo or as root)
</pre>
</p>

<p>If your distribution does not provide <i>barcode</i>, it can be built from source:
<pre>
wget ftp://mirrors.kernel.org/gnu/barcode/barcode-0.98.tar.gz
tar -xzf barcode-0.98.tar.gz
cd barcode-0.98
./configure
make
make install (using sudo or as root)
</pre>
The only package I found I needed outside of a regular development toolchain (gcc, make, etc.), to build barcode, was texinfo,
for the command <i>makeinfo</i>.  The rest of the commands used by the back end should be reasonably common 
on most distributions.</p>

<p>If your distribution does not provide <i>qrencode</i>, it can be built from source:
<pre>
wget http://fukuchi.org/works/qrencode/qrencode-3.1.1.tar.bz2
tar -xjf qrencode-3.1.1.tar.bz2
cd qrencode-3.1.1
./configure
make
make install (using sudo or as root)
</pre>
</p>

<p>
If your distribution does not provide netpbm for "pstopnm" and "pnmtopng", you
can download source <a href="http://netpbm.sourceforge.net">here</a>
</p>

</div>

<div id="install">
<b>Installation:</b><p></p>
</div>

<div id="from_package">
<b>From Packages:</b>

<p>The program is packaged as an rpm package, with dependencies on python-django. If your 
system does not provide django, or it's named differently, you may need to install using
--nodeps:

<pre>
rpm -Uvh foss-barcode-0.0.1-1.noarch.rpm --nodeps
</pre>

<p><b>Note:</b> If you had to use --nodeps, then you <em>must</em> make sure django is installed
and functional on your system. Both the command line program and the gui depend on django.</p>
 
The installation creates a "compliance" user/group and should create a desktop menu entry
to launch the server and open the GUI in your web browser.</p>

<p>In the future we may bundle django with the package to make things simpler, as well as 
provide .deb packaging.</p>

</div>

<div id="from_git">
<b>From Git:</b>

<p>You can also checkout the project from git and run it in place:

<pre>
git clone http://git.linuxfoundation.org/foss-barcode.git
cd foss-barcode
</pre>

Alternately, you can get the latest tarball from the 
<a href="http://git.linuxfoundation.org/?p=foss-barcode.git;a=summary">git</a> web page by
clicking on the <i>snapshot</i> link in the upper right-hand part of the page.</p>

<p>Once you have the tarball, unpack it (example, the numbers of your download may differ):</p>
<pre>
tar -xf foss-barcode-3af829ae0cc5aba33192c000ef0365ef6bced843.tar.gz
cd foss-barcode
</pre>

Create the application database and the documentation (you will need w3m to create 
README.txt).

<pre>
make
</pre>

If you don't have root permissions on the machine to install Django, you can install it in-place 
with the foss-barcode install:

<pre>
tar -xf Django-x.x.x.tar-gz
cp -ar Django-x.x.x/django foss-barcode/fossbarcode
cd foss-barcode/bin
ln -s ../fossbarcode/django .
</pre>

Run the server and the gui should show up in a browser window:
<pre>
./bin/foss-barcode.py start
</pre>

To kill the django server, you can run:
<pre>
./bin/foss-barcode.py stop
</pre></p>

</div>

<div id="layout">
<b>System Layout:</b>

<p>
The application installs under the <i>/opt/linuxfoundation</i> namespace:

<ul>
<li><b>bin</b> - wrapper script to launch gui</li>
<li><b>fossbarcode</b> - gui application tree and results database</li>
<li><b>doc</b> - License file</li>
<li><b>share</b> - Desktop menu files and icons</li>
</ul>

Under the fossbarcode tree, is a typical django project layout:

<ul>
<li><b>barcode.sqlite</b> - sqlite record database
<li><b>__init__.py, manage.py, settings.py, urls.py</b> - generated by django at project 
    creation, <i>settings.py</i> does have some configurable settings. None of the others should 
    be altered.</li>
<li><b>dbsettings.py</b> - editable configuration for using an alternate database engine</li>
<li><b>barcode</b> - foss-barcode backend python code</li>
<li><b>media</b> - static html elements such as images, css, javascript files. Documentation 
    is also in this directory.</li>
<li><b>templates/barcode</b> - the foss-barcode html tree</li>
</ul>
</div>

<div id="server">
<b>Running the GUI server:</b>

<p>To run the gui/server (as user compliance for installed package), there is a 
script that su's to the compliance user, starts the server and attempts to open a browser
page to the GUI:

<pre>
/opt/linuxfoundation/bin/foss-barcode.py start
</pre>

To stop the server run:

<pre>
/opt/linuxfoundation/bin/foss-barcode.py stop
</pre>
</p>

<p>If for some reason this does not work, you can manually perform the steps to start the
 server:

<pre>
su - compliance
cd /opt/linuxfoundation/fossbarcode
python manage.py runserver
</pre>

You can terminate the server from this console by hitting ctrl-C
</p>
</div>

<div id="gui">
<b>Accessing the GUI:</b>
<p>
If a browser does not open by launching the menu item, you can access the GUI 
(once the server is started): at 
<a href="http://127.0.0.1:8000/barcode" target="_blank">http://127.0.0.1:8000/barcode</a>.
</p>
</div>

<div id="gui-use">
<b>Using the GUI:</b>

<p>The GUI interface is pretty straightforward, with tabs to access various aspects of
program:

<ul>
<li><a href="#Create Compliance Data"><b>Create Compliance Data</b></a> - Data entry form</li>
<li><a href="#Review Compliance Records"><b>Review Compliance Records</b></a> - Tabular list of existing records</li>
<li><a href="#Search Compliance Records"><b>Search Compliance Records</b></a> - Search for records by checksum tab</li>
<li><a href="#System Configuration"><b>System Configuration</b></a> - User configurable system settings</li>
<li><b>Tool Documentation</b> - This documentation</li>
</ul>

The final page, which isn't visible in the tabs, is the record detail page, 
brought up by either generating a barcode, or clicking on the link in the results page.
</p>

<div id="Create Compliance Data">
<b>Create Compliance Data:</b>

<p>This tab is where you enter the information that defines the "product". This includes Company Name, 
FOSS Website, Product Name, Product Version, Product Release, as well as the Compliance
Contact Name (optional), Email and a top-level SPDX<sup>TM</sup> File (optional). The date is also recorded, simply for record keeping. 
It does not contribute to the checksum. You can also "release" a product by entering a Release Date. 
Once this field is populated the record is locked from further edits.</p>

<p>There are additional optional components that can be entered or loaded to further define the product. 
These include SPDX<sup>TM</sup> files as well as a tabular list of FOSS Components and possible patches. If files
are loaded using the file selection navigator, they are stored in the system under user_data for review later
in the detailed reporting. Multiple files can be loaded for FOSS component patches.
For FOSS components, all fields but SPDX<sup>TM</sup> File and Patches are mandatory.</p>

<p>Once you enter the data, click on the <b>Add Compliance Record</b> button. After the data
is compiled you will be presented with the detailed record results in tabular form, with a graphical
image of the barcode. The <i>Download Postscript</i> link will download an .eps file of the bardcode
image suitable for product packaging. Websites and uploaded files should be clickable links for further information.</p>

<p>There is a <i>Print BoM Compliance Record</i> button on the detail page that should open the browser print
dialog to print to a physical printer or to a file. Some parts of the GUI are hidden in the
printed output so that only the test results show up in the printed report.</p>

</div>

<div id="Review Compliance Records">
<b>Review Compliance Records:</b>

<p>The data records should also be accessible from the <b>Review Records</b> page. This is a collapsible tree-style
list of all the data entries, sorted by company, product, version, release. Clicking on the link for the release will 
open the detail tab. If you want to delete records, you can select the checkboxes and 
delete them from here, using the <i>Delete Selected Records</i> button. Records can be edited or cloned from the Detail 
page, and a history of changes made will be created, with the ability to view the record as it appeared in older revisions.</p>
</div>

<div id="Search Compliance Records">
<b>Search Compliance Records:</b>

<p>The <b>Search Compliance Records</b> tab lets you enter a checksum and lookup the data detail for that value. You can also 
search by Company Name, Product Name, Version, and Release. If there is more than one match, you will be presented with a list 
where can select a release and view the detail.</p>

<div id="System Configuration">
<b>System Configuation:</b>

<p>The <b>System Configuration</b> tab lets you change the default settings for some variables used by the system. 
In particular, <i>host_site</i> is used and captured in the QR code data, and should point to the site where you intend 
to host the compliance data for public viewing. Default values for the top-level record entry can be defined here, for ease 
of record entry/consistency. The default code generation displayed is also selectable here. All 3 types of codes are generated 
for each record.</p>

</div>

</div> <!-- end of Using the GUI -->
 
<div id="admin">
<b>Admin Interface:</b>

<p>In the current configuration, the django admin interface is enabled. While you can use 
this interface to directly access the database records, one should take care not to alter 
existing records, except in the case of wishing to add license information to records.</p>

<p><b>admin interface:</b> <a href="http://127.0.0.1:8000/admin" target="_blank">http://127.0.0.1:8000/admin</a>
(username compliance, password compliance)
</p>
</div>

<div id="database">
<b>Database Schema:</b>

<p>The database for the application is in the file <i>barcode.sqlite</i> in the fossbarcode 
directory. It is an sqlite3 database file. Tables used by the application are as follows
(arranged more or less as they are integrated into the application tabs):</p>

<ul>
<li><b>product_record</b> - table containing the information entered from the <b>Enter Data</b> tab. Each
record has an <i>id</i> used to track the record and the relationships to the components and patch 
tables.</li>
  <ul>
    <li>id - record id, used for linking to the spdx and components tables (primary key)</li>
    <li>company - Company Name</li>
    <li>website - Company FOSS Website</li>
    <li>record_date - Date/time record was created</li>
    <li>contact - Compliance Contact</li>
    <li>email - Compliance Contact Email</li>
    <li>product - Product name</li>
    <li>version - Product Verson</li>
    <li>release - Product Release</li>
    <li>checksum - Generated Checksum</li>
    <li>spdx_file - SPDX<sup>TM</sup> File describing the whole product (line item SPDX files will be blocked if this is used)</li>
    <li>release_date - Date product was released to production (record is locked for edits)</li>
  </ul>
<li><b>foss_components</b> - entered list of FOSS components, versions, etc. Linked to the <i>record</i> table 
via <i>brecord_id</i>.</li>           
  <ul>
    <li>id - primary key</li>
    <li>brecord_id - link to the top-level record entry</li>
    <li>data_file_name - each component's data is stored on the filesystem in a python "pickle" file, under version control. These files have the rest of the line item detail:</li>
    <ul>
        <li>package - FOSS software component name</li>
        <li>version - FOSS component version</li>
        <li>copyright - FOSS copyright information</li>
        <li>attribution - FOSS attribution notices</li> 
        <li>license_id - link to the associated license record</li>
        <li>license_url - URL where FOSS license can be obtained</li>
        <li>url - upstream URL where FOSS component can be obtained</li>
        <li>spdx_file - SPDX<sup>TM</sup> file name for the FOSS component</li>
        <li>patch_files - list of patch files for the FOSS component</li>
    </ul>
  </ul>
<li><b>system_settings</b> - User configurable system settings, such as <i>host_site</i>. Adding settings is not yet exposed in the UI.</li>
  <ul>
    <li>id - primary key</li>
    <li>name - variable name used by the application</li>
    <li>ftype - field type, choice of text, boolean, or choices (choose from a list)</li>
    <li>value - assigned variable value</li>
    <li>descr - description of the value's purpose</li>
    <li>last_updated - last update date</li>
    <li>user_updated - boolean value. Shipped values have this set to False. User must review and save to use application</li>
  </ul>
<li><b>license</b> - List of FOSS license and version used to populate the drop-down select when entering records.</li>
  <ul>
    <li>id - primary key</li>
    <li>longname - Long version of license name (ex: Apache License)</li>
    <li>license - Short version of license name (ex: Apache)</li>
    <li>version - Numeric license version (if appropriate, ex: 2.0)</li>
  </ul>
<li><b>licensealias</b> - List of alternate text representations of the FOSS licenses. Many-to-one relationship with the license table.</li>
  <ul>
    <li>id - primary key</li>
    <li>license_id - link to the associated license record</li>
    <li>alias - Alternate text to represent the same license (ex: Apache2)</li>
  </ul>
<li><b>component_cache</b> - Cache table that collects new component entries to facilitate entering future records from a drop-down for consistent data entry.</li>
  <ul>
    <li>id - primary key</li>
    <li>component - FOSS software component name</li>
    <li>url - upstream URL where FOSS component can be obtained</li>
    <li>license_id - reference to the record id in the license table</li>
    <li>license_url - URL where FOSS license can be obtained</li>
    <li>copyright - FOSS copyright information</li>
    <li>attribution - FOSS attribution notices</li>
  </ul>
</ul>
</div>

<div id="dbserver">
<b>Using a Database Server:</b>

<p>By default, the progam uses a SQLite database to store its data.
  This is suitable for most cases, but it may be important to scale up
  to a real database server for high-volume situations.  This can be
  done by editing the <tt>fossbarcode/dbsettings.py</tt> file.  Besides the
  default SQLite setup, examples are provided for MySQL, PostgreSQL,
  and Oracle database servers.  Comment out the SQLite configuration,
  uncomment the configuration for your database server, and edit the
  configuration as appropriate.</p>

</div>

<div id="pfacing">
<b>Public-Facing Configuration</b>

<p>This same set of code used internally to create and manage records can be used on the public-facing site. In this mode, one can only view the list of records, search for records, and see the record detail. No input/editing is enabled, nor docs or configuration tabs. Attempts to access the other tabs will redirect to the records tab.</p>

<p>To enable the public facing mode:</p>
<ol>
  <li>Edit <tt>"host_site"</tt> in the System Configuration tab. The url should be of the nature <tt>"http://hostname/barcode/checksum/"</tt>. You can simulate a public-facing layout in your local install by using <tt>"http://localhost:8000/barcode/checksum/"</tt>. Users that follow the checksum url from the MECARD data will be directed to this page, with the checksum appended, which will redirect to the correct record_id.</li>
  <li>Edit <tt>"public_logo"</tt> in the System Configuration tab. This should be a 190x60 pixel logo file. Place the file in the media/images directory. This file will replace the banner image when the site is in public-facing mode.</li>
  <li>Edit <tt>"public_facing"</tt> in site_settings.py, setting the value to <tt>"True"</tt>. Once this is set, the installation will be in public-facing mode. To turn it back off, change the value to <tt>"False"</tt>(This is in a file rather than the database, as System Configuration is no longer available once you're in public-facing mode).</li>
</ol>

<p>The live public site would then need to sync the database, as well as everything under media/user_data. This could be enabled via a cron job or such.</p>

</div>

<div id="backend">
<b>How it Works:</b>

<p>What the program does is collect several of the user inputs and feed these through md5sum to get 
a checksum. This checksum is then used to generate the barcode, using either of the 2 command line applications, <i>barcode</i> or <i>qrencode</i>:

<pre>
barcode -b &lt;checksum&gt; -e 128 -m '0,0' -E &gt; &lt;checksum&gt;.ps
</pre>

and converted to a bitmap for display on the detail page:

<pre>
pstopnm -xsize 500 -portrait -stdout &lt;checksum&gt;.ps | pnmtopng &gt; &lt;checksum&gt;.png
</pre>

For the case of qrencode, not only is the checksum used, but additional data is gathered in MECARD format for scanning by devices capable of using this data. qrencode creates the bitmap .png file native, and post processing creates the .ps file using sam2p.

<pre>
qrencode -v 6 -l Q -m 0 -o checksum.png [mecard data]
</pre>

An overview of the MECARD format can be found <a href="http://www.nttdocomo.co.jp/english/service/imode/make/content/barcode/function/application/addressbook/">here</a>. A typical record created by the application would look something like this (line breaks added for readability):

<pre>
MECARD:
N:Software Widgets Inc.;
URL:http://softwarewidgets.com;
EMAIL:widgetsupport@softwarewidgets.com;
NOTE:Widget III, Version: 3, Release: 2, BoM: (fosslib1 1 GPLv2), (fosslib2 2.4 BSD);
URL:http://compliance.linuxfoundation.org/foss-products/bcfc695e010eac680d69c914ec0c781a;
</pre>
</p>

<p>There are 2 QR code formats created: qr and qr+. qr+ is as described above, whereas the "plain" qr format simply has the URL to the public facing record detail.</p>
</div>

<div id="limitations">
<b>Limitations:</b>

<p>Currently the application does not attempt to parse imported SPDX<sup>TM</sup> files.</p>

</div>

<!-- content beyond here is generated by the Makefile -->
